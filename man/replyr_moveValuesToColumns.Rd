% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gather_spread.R
\name{replyr_moveValuesToColumns}
\alias{replyr_moveValuesToColumns}
\title{Spread values found in rowKeyColumns row groups as new columns. A concept demonstration, not a fully usable function.}
\usage{
replyr_moveValuesToColumns(data, columnToTakeKeysFrom, columnToTakeValuesFrom,
  rowKeyColumns, maxcols = 100, eagerCompute = FALSE)
}
\arguments{
\item{data}{data.frame to work with.}

\item{columnToTakeKeysFrom}{character name of column build new column names from.}

\item{columnToTakeValuesFrom}{character name of column to get values from.}

\item{rowKeyColumns}{character array names columns that should be table keys.}

\item{maxcols}{maximum number of values to expand to columns}

\item{eagerCompute}{if TRUE call compute on intermediate results}
}
\value{
data item
}
\description{
Spread values found in rowKeyColumns row groups as new columns.
Values types (new column names) are identified in nameForNewKeyColumn and values are taken
from nameForNewValueColumn.
This is denormalizing operation, or essentially a tidyr::spread, dplyr::dcast, or pivot.
This implementation moves
so much data it is essentially working locally and also very inefficient.
}
\examples{

d <- data.frame(
  index = c(1, 2, 3, 1, 2, 3),
  meastype = c('meas1','meas1','meas1','meas2','meas2','meas2'),
  meas = c('m1_1', 'm1_2', 'm1_3', 'm2_1', 'm2_2', 'm2_3'),
  stringsAsFactors = FALSE)
replyr_moveValuesToColumns(d,
                           columnToTakeKeysFrom= 'meastype',
                           columnToTakeValuesFrom= 'meas',
                           rowKeyColumns= 'index')
# cdata::moveValuesToColumns(d,
#                            columnToTakeKeysFrom= 'meastype',
#                            columnToTakeValuesFrom= 'meas',
#                            rowKeyColumns= 'index')


}
